version: "3"

volumes:
  pgdb:

services:
  postgres:
    container_name: ${SERVICE_BACKEND_POSTGRESS}
    image: postgres:latest
    restart: always
    ports:
      - ${PORT_BACKEND_POSTGRESS}:5432
    volumes:
      - /data/postgres:/data/postgres
    env_file:
      - env/backend-db.env
    networks:
      - ${NETWORK}

  pgadmin:
    container_name: ${SERVICE_PGADMIN}
    image: dpage/pgadmin4
    ports:
      - ${PORT_PGADMIN}:80
    links:
      - postgres:postgres
    volumes:
      - /data/pgadmin:/root/.pgadmin
    env_file:
      - env/backend-db.env
    networks:
      - ${NETWORK}

  backend:
    image: node:14.16.0-alpine3.10
    container_name: ${SERVICE_NEST}
    working_dir: /life_nest
    ports:
      - ${PORT_NEST}:3000
    volumes:
      - ../life_nest:/life_nest:cached
    links:
      - postgres:postgres
    env_file:
      - env/backend-db.env
      - env/backend.env
    networks:
      - ${NETWORK}
    depends_on:
      - postgres
    command: ${COMAND_BACKEND}
    expose:
      - "3000"

  frontend:
    image: node:14.16.0-alpine3.10
    container_name: ${SERVICE_FRONTEND}
    working_dir: /life_frontend
    build:
      context: ../life_frontend
    ports:
      - ${PORT_FRONTEND}:8080
    volumes:
      - ../life_frontend:/life_frontend:cached
    networks:
      - ${NETWORK}
    command: ${COMAND_FRONTEND}
    links:
      - backend

  sentry-redis:
    image: redis

  sentry-postgres:
    container_name: ${SERVICE_SENTRY_POSTGRESS}
    image: postgres
    volumes:
      - pgdb:/var/lib/postgresql/data
    env_file:
      - env/sentry.env

  sentry-sentry:
    container_name: ${SERVICE_SENTRY}
    image: sentry
    links:
      - sentry-redis
      - sentry-postgres
    ports:
      - ${PORT_SENTRY}:9000
    env_file:
      - env/sentry.env
      - env/sentry-db.env

  sentry-cron:
    container_name: ${SERVICE_SENTRY_CRON}
    image: sentry
    links:
      - sentry-redis
      - sentry-postgres
    command: ${COMAND_SENTRY_CRON}
    env_file:
      - env/sentry.env
      - env/sentry-db.env

  sentry-worker:
    container_name: ${SERVICE_SENTRY_WORKER}
    image: sentry
    links:
      - sentry-redis
      - sentry-postgres
    command: ${COMAND_SENTRY_WORKER}
    env_file:
      - env/sentry.env
      - env/sentry-db.env

networks:
  postgres:
    driver: ${NETWORK_DRIVER}

