version: "3"

volumes:
  pgdb:

services:
  postgres:
    container_name: ${SERVICE_BACKEND_POSTGRESS}
    image: postgres:latest
    restart: always
    ports:
      - ${PORT_BACKEND_POSTGRESS}:5432
    volumes:
      - /data/postgres:/data/postgres
    env_file:
      - env/dev/backend-db.env
    networks:
      - ${NETWORK}


  mongo:
    image: mongo
    container_name: ${SERVICE_MONGO}
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - ${NETWORK}


  backend:
    image: node:14-alpine3.10
    container_name: ${SERVICE_NEST}
    working_dir: /${FOLDER_NEST}
    ports:
      - ${PORT_NEST}:3000
    volumes:
      - ./${FOLDER_NEST}:/${FOLDER_NEST}
      - ./${FOLDER_SHARED}:/${FOLDER_SHARED}
    links:
      - postgres:postgres
    env_file:
      - env/dev/.env
      - env/dev/backend.env
      - env/dev/backend-db.env
    networks:
      - ${NETWORK}
    depends_on:
      - postgres
    command: sh -c "apk add --no-cache file && apk --update add imagemagick && apk --no-cache add msttcorefonts-installer fontconfig && fc-cache -f && npm run start:dev"
#    command: ${COMAND_BACKEND}
    expose:
      - "3000"

  frontend:
    image: node:14.16.0-alpine3.10
    container_name: ${SERVICE_FRONTEND}
    working_dir: /${FOLDER_VUE}
    build:
      context: ./${FOLDER_VUE}
    ports:
      - ${PORT_FRONTEND}:8080
    env_file:
      - env/dev/.env
    volumes:
      - ./${FOLDER_VUE}:/${FOLDER_VUE}:cached
      - ./${FOLDER_SHARED}:/${FOLDER_SHARED}:cached
    networks:
      - ${NETWORK}
    command: ${COMAND_FRONTEND}
    links:
      - backend
    expose:
      - "8080"


networks:
  postgres:
    driver: ${NETWORK_DRIVER}

